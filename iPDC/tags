!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	0.0.0	//
$(PROGRAM)	Makefile	/^$(PROGRAM): $(OBJECTS)$/;"	t
%.o	Makefile	/^%.o: %.c$/;"	t
ALIGN_SORT	align_sort.h	/^#define ALIGN_SORT$/;"	d
BACKLOG	connections.h	/^#define BACKLOG /;"	d
CC	Makefile	/^CC = gcc$/;"	m
CFGSYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3][3]
CFLAGS	Makefile	/^CFLAGS=-g `pkg-config --cflags --cflags gtk+-2.0`$/;"	m
CH_GET_OBJECT	ipdcGui.h	/^#define CH_GET_OBJECT(/;"	d
CH_GET_WIDGET	ipdcGui.h	/^#define CH_GET_WIDGET(/;"	d
CLEAN_OBJECTS	Makefile	/^CLEAN_OBJECTS =  recreate.o connections.o new_pmu_or_pdc.o parser.o dallocate.o align_sort.o ipd/;"	m
CMDCFGSEND	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3][3][3][3][3][3]
CMDDATAOFF	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3][3][3][3][3]
CMDDATASEND	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3][3][3][3]
CMDSYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3][3][3]
COMPILE	Makefile	/^COMPILE = $(CC) $/;"	m
CREATE_DIR	Makefile	/^CREATE_DIR = $(INSTALL_PREFIX)\/share\/$/;"	m
ChData	ipdcGui.h	/^typedef struct _ChData ChData;$/;"	t	typeref:struct:_ChData
DATASYNC	global.h	/^unsigned char DATASYNC[3],CFGSYNC[3],CMDSYNC[3],CMDDATASEND[3],CMDDATAOFF[3],CMDCFGSEND[3];$/;"	v	typeref:typename:unsigned char[3]
DBPORT	connections.h	/^#define DBPORT /;"	d
DB_Server_addr	global.h	/^struct sockaddr_in DB_Server_addr; \/\/ address information$/;"	v	typeref:struct:sockaddr_in
DB_addr_len	global.h	/^int DB_sockfd,DB_addr_len;$/;"	v	typeref:typename:int
DB_pdc	connections.h	/^}*ULfirst,*ULlast,*DB_pdc;$/;"	v	typeref:struct:Upper_Layer_Details ***
DB_sockfd	global.h	/^int DB_sockfd,DB_addr_len;$/;"	v	typeref:typename:int
DB_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread, DB_thread;$/;"	v	typeref:typename:pthread_t
DB_udp	connections.c	/^void* DB_udp(){$/;"	f	typeref:typename:void *
DESKTOP_DIR	Makefile	/^DESKTOP_DIR = ${HOME}\/.local\/share\/applications$/;"	m
FILE1	Makefile	/^FILE1 = iPDC.xml$/;"	m
FILE2	Makefile	/^FILE2 = ipdcLogo.png$/;"	m
FILE3	Makefile	/^FILE3 = PSLab.PNG$/;"	m
FILE4	Makefile	/^FILE4 = ipdcLogo1.png$/;"	m
FILE5	Makefile	/^FILE5 = logo.png$/;"	m
FILE6	Makefile	/^FILE6 = iPDC.desktop$/;"	m
FILE7	Makefile	/^FILE7 = runiPDC$/;"	m
GW	ipdc.c	/^	#define GW(/;"	d	file:
ICON_DIR	Makefile	/^ICON_DIR = ${HOME}\/.local\/share\/icons$/;"	m
INSTALL	Makefile	/^INSTALL = \/usr\/bin\/install -c$/;"	m
INSTALL_PREFIX	Makefile	/^INSTALL_PREFIX = ${HOME}\/iPDC$/;"	m
LDLIBS	Makefile	/^LDLIBS=-g `pkg-config --cflags --libs gtk+-2.0`$/;"	m
LIBS	Makefile	/^LIBS = -lpthread$/;"	m
LLfirst	connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details *
LLlast	connections.h	/^}*LLfirst,*LLlast;$/;"	v	typeref:struct:Lower_Layer_Details **
Lower_Layer_Details	connections.h	/^struct Lower_Layer_Details {$/;"	s
MAXBUFLEN	parser.h	/^#define MAXBUFLEN /;"	d
MAXTSB	align_sort.h	/^#define MAXTSB /;"	d
MAX_STRING_SIZE	global.h	/^#define MAX_STRING_SIZE /;"	d
OBJECTS	Makefile	/^OBJECTS =  ipdc.c recreate.o connections.o new_pmu_or_pdc.o parser.o dallocate.o align_sort.o ip/;"	m
ODFT	align_sort.h	/^}ODFT[OLDFRAMECOUNT];$/;"	v	typeref:struct:oldDataFramesTimeStampList[]
OLDFRAMECOUNT	align_sort.h	/^#define OLDFRAMECOUNT /;"	d
PDC_IDCODE	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v	typeref:typename:int
PMU_process_Mul	connections.c	/^void PMU_process_Mul(unsigned char *udp_buffer,int sockfd){$/;"	f	typeref:typename:void
PMU_process_TCP	connections.c	/^void PMU_process_TCP(unsigned char tcp_buffer[],int sockfd) {$/;"	f	typeref:typename:void
PMU_process_UDP	connections.c	/^void PMU_process_UDP(unsigned char *udp_buffer,struct sockaddr_in PMU_addr,int sockfd){$/;"	f	typeref:typename:void
PROGRAM	Makefile	/^PROGRAM = iPDC$/;"	m
SHELL	Makefile	/^SHELL = \/bin\/sh$/;"	m
SOURCES	Makefile	/^SOURCES = \\$/;"	m
TCPPORT	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v	typeref:typename:int
TCP_my_addr	global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:sockaddr_in
TCP_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread, DB_thread;$/;"	v	typeref:typename:pthread_t
TSB	align_sort.h	/^}TSB[MAXTSB];$/;"	v	typeref:struct:TimeStampBuffer[]
TimeStampBuffer	align_sort.h	/^struct TimeStampBuffer {$/;"	s
Tsb_Count	align_sort.c	/^int Tsb_Count = 0;$/;"	v	typeref:typename:int
UDPPORT	global.h	/^int PDC_IDCODE,TCPPORT,UDPPORT;$/;"	v	typeref:typename:int
UDP_my_addr	global.h	/^struct sockaddr_in UDP_my_addr,TCP_my_addr; \/* my address information *\/$/;"	v	typeref:struct:sockaddr_in
UDP_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread, DB_thread;$/;"	v	typeref:typename:pthread_t
UL_TCP_addr	global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:sockaddr_in
UL_TCP_sin_size	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v	typeref:typename:int
UL_TCP_sockfd	global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v	typeref:typename:int
UL_UDP_addr	global.h	/^struct sockaddr_in UL_UDP_addr,UL_TCP_addr; \/* connector’s address information *\/$/;"	v	typeref:struct:sockaddr_in
UL_UDP_addr_len	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v	typeref:typename:int
UL_UDP_sockfd	global.h	/^int UL_UDP_sockfd,UL_TCP_sockfd; \/* socket descriptors *\/$/;"	v	typeref:typename:int
UL_data_transmission_off	connections.h	/^	int UL_data_transmission_off;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
UL_tcp	connections.c	/^void* UL_tcp() {$/;"	f	typeref:typename:void *
UL_tcp_command	connections.h	/^unsigned char UL_tcp_command[19];$/;"	v	typeref:typename:unsigned char[19]
UL_tcp_connection	connections.c	/^void* UL_tcp_connection(void * temp_pdc) {$/;"	f	typeref:typename:void *
UL_udp	connections.c	/^void* UL_udp(){$/;"	f	typeref:typename:void *
UL_udp_command	connections.h	/^unsigned char UL_udp_command[19];$/;"	v	typeref:typename:unsigned char[19]
UL_upper_pdc_cfgsent	connections.h	/^	int UL_upper_pdc_cfgsent;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
ULfirst	connections.h	/^}*ULfirst,*ULlast,*DB_pdc;$/;"	v	typeref:struct:Upper_Layer_Details *
ULlast	connections.h	/^}*ULfirst,*ULlast,*DB_pdc;$/;"	v	typeref:struct:Upper_Layer_Details **
Upper_Layer_Details	connections.h	/^struct Upper_Layer_Details {$/;"	s
_ChData	ipdcGui.h	/^struct _ChData$/;"	s
__SUPPORT_H__	ipdcGui.h	/^#define __SUPPORT_H__$/;"	d
about_ipdc	ipdcGui.c	/^void about_ipdc (GtkButton *widget, gpointer udata)$/;"	f	typeref:typename:void
about_menuitem	ipdcGui.h	/^	GtkWidget *about_menuitem;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
add_PDC	new_pmu_or_pdc.c	/^int add_PDC(char ip[], char protocol[]) {$/;"	f	typeref:typename:int
add_PMU	new_pmu_or_pdc.c	/^int add_PMU(char pmuid[], char ip[], char port[], char protocol[]) {$/;"	f	typeref:typename:int
add_PMU_Node	new_pmu_or_pdc.c	/^void add_PMU_Node(struct Lower_Layer_Details *temp_pmu) {$/;"	f	typeref:typename:void
add_id_to_status_change_list	parser.c	/^void add_id_to_status_change_list(unsigned char idcode[]) { $/;"	f	typeref:typename:void
add_new_pdc	ipdcGui.c	/^void add_new_pdc (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
add_pdc_button	ipdcGui.h	/^	GtkWidget *add_pdc_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
add_pmu	ipdcGui.c	/^void add_pmu (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
add_pmu_button	ipdcGui.h	/^	GtkWidget *add_pmu_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
add_pmu_validation	ipdcGui.c	/^int add_pmu_validation (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:int
add_pmu_window	ipdcGui.h	/^GtkWidget *add_pmu_window, *chkBtn;$/;"	v	typeref:typename:GtkWidget *
address_set	connections.h	/^	int address_set;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
adjustOldFrameCount	align_sort.c	/^void adjustOldFrameCount(int index) {$/;"	f	typeref:typename:void
admin_label	ipdcGui.h	/^	GtkWidget *admin_label;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
analog	parser.h	/^	unsigned char **analog;	$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char **
analog	parser.h	/^	unsigned char analog;$/;"	m	struct:format	typeref:typename:unsigned char
angnames	parser.h	/^	unsigned char **angnames;$/;"	m	struct:channel_names	typeref:typename:unsigned char **
annmr	parser.h	/^	int annmr;$/;"	m	struct:data_for_each_pmu	typeref:typename:int
annmr	parser.h	/^	unsigned char *annmr;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
anunit	parser.h	/^	unsigned char **anunit;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char **
apply_ipdc_setup	ipdcGui.c	/^void apply_ipdc_setup (GtkWidget *w, gpointer udata)$/;"	f	typeref:typename:void
apply_ipdc_setup_arg	ipdcGui.c	/^void apply_ipdc_setup_arg (int argc, char **argv)$/;"	f	typeref:typename:void
assign_df_to_TSB	align_sort.c	/^void assign_df_to_TSB(struct data_frame *df,int index) { $/;"	f	typeref:typename:void
buff	ipdcGui.h	/^char buff[8000];$/;"	v	typeref:typename:char[8000]
byte_by_byte_copy	parser.c	/^void byte_by_byte_copy(unsigned char dst[],unsigned char src[],int index,int n) {$/;"	f	typeref:typename:void
cfg_cnt	parser.h	/^	unsigned char *cfg_cnt;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
cfg_frame	parser.h	/^struct  cfg_frame {$/;"	s
cfgfirst	parser.h	/^}*cfgfirst;$/;"	v	typeref:struct:cfg_frame *
cfgframe	global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v	typeref:typename:unsigned char *
cfgnext	parser.h	/^	struct  cfg_frame *cfgnext;$/;"	m	struct:cfg_frame	typeref:struct:cfg_frame *
cfgparser	parser.c	/^void cfgparser(unsigned char st[]){ $/;"	f	typeref:typename:void
channel_names	parser.h	/^struct channel_names {$/;"	s
check_statword	parser.c	/^int check_statword(unsigned char stat[]) { $/;"	f	typeref:typename:int
checkip	new_pmu_or_pdc.c	/^int checkip(char ip[]) {$/;"	f	typeref:typename:int
chkBtn	ipdcGui.h	/^GtkWidget *add_pmu_window, *chkBtn;$/;"	v	typeref:typename:GtkWidget **
clean	Makefile	/^clean:$/;"	t
clear_TSB	align_sort.c	/^void clear_TSB(int index) { \/\/ $/;"	f	typeref:typename:void
cmd_cfg_button	ipdcGui.h	/^	GtkWidget *cmd_cfg_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
cmd_data_off_button	ipdcGui.h	/^	GtkWidget *cmd_data_off_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
cmd_data_on_button	ipdcGui.h	/^	GtkWidget *cmd_data_on_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
cmd_inst_button	ipdcGui.h	/^	GtkWidget *cmd_inst_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
cmd_or_remove_pmu	ipdcGui.c	/^void cmd_or_remove_pmu (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
cmd_or_remove_pmu_validation	ipdcGui.c	/^int cmd_or_remove_pmu_validation (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:int
cnext	parser.h	/^	struct channel_names *cnext;$/;"	m	struct:for_each_pmu	typeref:struct:channel_names *
compute_CRC	parser.c	/^uint16_t compute_CRC(unsigned char *message,int length) {$/;"	f	typeref:typename:uint16_t
config_change	connections.h	/^	int config_change;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
config_request	new_pmu_or_pdc.c	/^void* config_request(void* temp) {$/;"	f	typeref:typename:void *
configuration_request	new_pmu_or_pdc.c	/^int configuration_request(char pmuid[], char protocol[]) {$/;"	f	typeref:typename:int
connect_pmu_mul	new_pmu_or_pdc.c	/^void* connect_pmu_mul(void *temp) {$/;"	f	typeref:typename:void *
connect_pmu_tcp	new_pmu_or_pdc.c	/^void* connect_pmu_tcp(void *temp) {$/;"	f	typeref:typename:void *
connect_pmu_udp	new_pmu_or_pdc.c	/^void* connect_pmu_udp(void *temp) {$/;"	f	typeref:typename:void *
connection_table	ipdcGui.c	/^void connection_table (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
copy_cbyc	parser.c	/^void copy_cbyc(unsigned char dst[],unsigned char *s,int size) {$/;"	f	typeref:typename:void
count	align_sort.h	/^	int count; \/\/ Current index$/;"	m	struct:TimeStampBuffer	typeref:typename:int
counter	align_sort.h	/^	int counter; \/\/ Timer that will be initially set to 0$/;"	m	struct:TimeStampBuffer	typeref:typename:int
create_cfgframe	align_sort.c	/^int create_cfgframe() { $/;"	f	typeref:typename:int
create_command_frame	new_pmu_or_pdc.c	/^void create_command_frame(int type,int pmu_id,char cmdframe[]) {$/;"	f	typeref:typename:void
create_dataframe	align_sort.c	/^int create_dataframe(int index) {$/;"	f	typeref:typename:int
create_pixbuf	ipdcGui.c	/^GdkPixbuf *create_pixbuf(const gchar * filename)$/;"	f	typeref:typename:GdkPixbuf *
data	ipdcGui.h	/^ChData    *data;$/;"	v	typeref:typename:ChData *
dataWriteInFile	parser.c	/^void* dataWriteInFile() {$/;"	f	typeref:typename:void *
data_for_each_pmu	parser.h	/^struct data_for_each_pmu {$/;"	s
data_format	parser.h	/^	unsigned char *data_format;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
data_frame	parser.h	/^struct data_frame {$/;"	s
data_off_llnode	new_pmu_or_pdc.c	/^void* data_off_llnode(void* temp) {$/;"	f	typeref:typename:void *
data_on_llnode	new_pmu_or_pdc.c	/^void* data_on_llnode(void* temp) {$/;"	f	typeref:typename:void *
data_rate	parser.h	/^	unsigned char *data_rate;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
data_transmission_off	connections.h	/^	int data_transmission_off;$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
dataframe	global.h	/^unsigned char *cfgframe,*dataframe;$/;"	v	typeref:typename:unsigned char **
dataparser	parser.c	/^int dataparser(unsigned char data[]) { $/;"	f	typeref:typename:int
dbserver_ip	global.h	/^char dbserver_ip[20];$/;"	v	typeref:typename:char[20]
destroy	ipdcGui.c	/^void destroy (GtkWidget *widget, gpointer udata)$/;"	f	typeref:typename:void
dfreq	parser.h	/^	unsigned char *dfreq;$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char *
dg_next	parser.h	/^	struct dgnames *dg_next;$/;"	m	struct:dgnames	typeref:struct:dgnames *
dgn	parser.h	/^	unsigned char **dgn; \/\/ Stores 16 digital names for each word$/;"	m	struct:dgnames	typeref:typename:unsigned char **
dgnames	parser.h	/^struct dgnames {$/;"	s
dgnmr	parser.h	/^	int dgnmr;$/;"	m	struct:data_for_each_pmu	typeref:typename:int
dgnmr	parser.h	/^	unsigned char *dgnmr;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
dgunit	parser.h	/^	unsigned char **dgunit;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char **
digital	parser.h	/^	unsigned char **digital;$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char **
dispatch	align_sort.c	/^void dispatch(int index) {$/;"	f	typeref:typename:void
display_CT	new_pmu_or_pdc.c	/^void display_CT() {$/;"	f	typeref:typename:void
display_buf	connections.c	/^char display_buf[200];$/;"	v	typeref:typename:char[200]
display_conn_table_button	ipdcGui.h	/^	GtkWidget *display_conn_table_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
display_pdc_detail	ipdcGui.c	/^void display_pdc_detail (GtkButton *widget, gpointer udata)$/;"	f	typeref:typename:void
display_time	ipdcGui.c	/^void* display_time()$/;"	f	typeref:typename:void *
dnext	parser.h	/^	struct data_frame *dnext;$/;"	m	struct:data_frame	typeref:struct:data_frame *
dpmu	parser.h	/^	struct data_for_each_pmu **dpmu;$/;"	m	struct:data_frame	typeref:struct:data_for_each_pmu **
enter_pdc_detail_menuitem	ipdcGui.h	/^	GtkWidget *enter_pdc_detail_menuitem;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
exit_button	ipdcGui.h	/^	GtkWidget *exit_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
exit_menuitem	ipdcGui.h	/^	GtkWidget *exit_menuitem;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
fill_pdc_details	ipdcGui.c	/^void fill_pdc_details (char *filePath)$/;"	f	typeref:typename:void
final_pdc_setup_call	ipdcGui.c	/^void final_pdc_setup_call()$/;"	f	typeref:typename:void
find_butn	ipdcGui.h	/^char find_butn[2];$/;"	v	typeref:typename:char[2]
first	parser.h	/^	struct dgnames *first;$/;"	m	struct:channel_names	typeref:struct:dgnames *
first_data_frame	align_sort.h	/^	struct data_frame *first_data_frame;$/;"	m	struct:TimeStampBuffer	typeref:struct:data_frame *
fmt	parser.h	/^	struct format *fmt;$/;"	m	struct:data_for_each_pmu	typeref:struct:format *
fmt	parser.h	/^	struct format *fmt;$/;"	m	struct:for_each_pmu	typeref:struct:format *
fnom	parser.h	/^	unsigned char *fnom;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
for_each_pmu	parser.h	/^struct for_each_pmu{$/;"	s
format	parser.h	/^struct format{$/;"	s
fp_log	global.h	/^FILE *fp_log;$/;"	v	typeref:typename:FILE *
fptr	ipdcGui.h	/^char fptr[200];$/;"	v	typeref:typename:char[200]
fracsec	align_sort.h	/^	char *fracsec;$/;"	m	struct:TimeStampBuffer	typeref:typename:char *
fracsec	align_sort.h	/^	unsigned int fracsec;$/;"	m	struct:oldDataFramesTimeStampList	typeref:typename:unsigned int
fracsec	parser.h	/^	unsigned char *fracsec;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
fracsec	parser.h	/^	unsigned char *fracsec;$/;"	m	struct:data_frame	typeref:typename:unsigned char *
framesize	parser.h	/^	unsigned char *framesize;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
framesize	parser.h	/^	unsigned char *framesize;$/;"	m	struct:data_frame	typeref:typename:unsigned char *
free_2darray	dallocate.c	/^void free_2darray(unsigned char** array, int n){ $/;"	f	typeref:typename:void
free_cfgframe_object	dallocate.c	/^void free_cfgframe_object(struct cfg_frame *cfg) { $/;"	f	typeref:typename:void
free_dataframe_object	dallocate.c	/^void free_dataframe_object(struct data_frame *df) { $/;"	f	typeref:typename:void
freq	parser.h	/^	unsigned char *freq;$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char *
freq	parser.h	/^	unsigned char freq;$/;"	m	struct:format	typeref:typename:unsigned char
front	align_sort.c	/^int front = -1;$/;"	v	typeref:typename:int
generate_dummy_dataframe	align_sort.c	/^struct data_frame* generate_dummy_dataframe(unsigned char *idcode)$/;"	f	typeref:struct:data_frame *
idcode	align_sort.h	/^	char *idcode;$/;"	m	struct:pmupdc_id_list	typeref:typename:char *
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:data_frame	typeref:typename:unsigned char *
idcode	parser.h	/^	unsigned char *idcode;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
idcode	parser.h	/^	unsigned char idcode[3];$/;"	m	struct:status_change_pmupdcid	typeref:typename:unsigned char[3]
idlist	align_sort.h	/^	struct pmupdc_id_list *idlist;$/;"	m	struct:TimeStampBuffer	typeref:struct:pmupdc_id_list *
includedir	Makefile	/^includedir = \/usr\/src\/include$/;"	m
init_cfgparser	recreate.c	/^void init_cfgparser(unsigned char st[]){ $/;"	f	typeref:typename:void
inst_request	new_pmu_or_pdc.c	/^void* inst_request(void* temp) {$/;"	f	typeref:typename:void *
install	Makefile	/^install: $(PROGRAM)$/;"	t
instantaneous_request	new_pmu_or_pdc.c	/^int instantaneous_request(char pmuid[], char protocol[]) {$/;"	f	typeref:typename:int
int_to_ascii_convertor	parser.c	/^void int_to_ascii_convertor(unsigned int n,unsigned char hex[]) {$/;"	f	typeref:typename:void
intermediate_dispatch	align_sort.c	/^void intermediate_dispatch(int xx) {$/;"	f	typeref:typename:void
ip	connections.h	/^	char ip[20];$/;"	m	struct:Lower_Layer_Details	typeref:typename:char[20]
ip	connections.h	/^	char ip[20];$/;"	m	struct:Upper_Layer_Details	typeref:typename:char[20]
ipdc	ipdcGui.h	/^	GtkWidget *ipdc;  $/;"	m	struct:_ChData	typeref:typename:GtkWidget *
ipdcFilePath	global.h	/^char ipdcFilePath[200];$/;"	v	typeref:typename:char[200]
ipdcFolderPath	global.h	/^char ipdcFolderPath[200];$/;"	v	typeref:typename:char[200]
ipdc_colors	ipdcGui.c	/^void ipdc_colors()$/;"	f	typeref:typename:void
ipdc_help	ipdcGui.c	/^void ipdc_help (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
ipdc_setup_fileSelector	ipdcGui.c	/^void ipdc_setup_fileSelector (GtkWidget *widget, gpointer udata)$/;"	f	typeref:typename:void
ipdc_setup_window	ipdcGui.h	/^GtkWidget *ipdc_setup_window;$/;"	v	typeref:typename:GtkWidget *
isNumber	ipdcGui.c	/^int isNumber(char *s)$/;"	f	typeref:typename:int
llpmu_addr	connections.h	/^	struct sockaddr_in llpmu_addr;$/;"	m	struct:Lower_Layer_Details	typeref:struct:sockaddr_in
logIndex	global.h	/^unsigned int logIndex,pmuCount,tempPmuCount;$/;"	v	typeref:typename:unsigned int
logTimeBuff	global.h	/^char *logTimeBuff;$/;"	v	typeref:typename:char *
logTimeBuffBakup	global.h	/^char *logTimeBuffBakup;$/;"	v	typeref:typename:char *
long_int_to_ascii_convertor	parser.c	/^void long_int_to_ascii_convertor(unsigned long int n,unsigned char hex[]) {$/;"	f	typeref:typename:void
main	ipdc.c	/^int main(int argc, char **argv)$/;"	f	typeref:typename:int
markup	ipdcGui.h	/^char *markup;$/;"	v	typeref:typename:char *
menu_add_destination	ipdcGui.h	/^	GtkWidget *menu_add_destination;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_add_source	ipdcGui.h	/^	GtkWidget *menu_add_source;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_conn_table	ipdcGui.h	/^	GtkWidget *menu_conn_table;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_data_off	ipdcGui.h	/^	GtkWidget *menu_data_off;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_data_on	ipdcGui.h	/^	GtkWidget *menu_data_on;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_remove_destination	ipdcGui.h	/^	GtkWidget *menu_remove_destination;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_remove_source	ipdcGui.h	/^	GtkWidget *menu_remove_source;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_request_cfg	ipdcGui.h	/^	GtkWidget *menu_request_cfg;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menu_request_inst	ipdcGui.h	/^	GtkWidget *menu_request_inst;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menubar	ipdcGui.h	/^	GtkWidget *menubar;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
menuitem2	ipdcGui.h	/^	GtkWidget *menuitem2;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
mutex_Lower_Layer_Details	global.h	/^pthread_mutex_t mutex_Lower_Layer_Details;  \/* To lock objects of connection table that hold lo/;"	v	typeref:typename:pthread_mutex_t
mutex_Upper_Layer_Details	global.h	/^pthread_mutex_t mutex_Upper_Layer_Details;  \/* To lock objects of connection table that hold up/;"	v	typeref:typename:pthread_mutex_t
mutex_cfg	global.h	/^pthread_mutex_t mutex_cfg;  \/* To lock cfg data objects *\/$/;"	v	typeref:typename:pthread_mutex_t
mutex_file	global.h	/^pthread_mutex_t mutex_file;  \/* To lock PMU Setup File *\/$/;"	v	typeref:typename:pthread_mutex_t
mutex_log_write	global.h	/^pthread_mutex_t mutex_log_write;$/;"	v	typeref:typename:pthread_mutex_t
mutex_on_TSB	global.h	/^pthread_mutex_t mutex_on_TSB;$/;"	v	typeref:typename:pthread_mutex_t
mutex_status_change	global.h	/^pthread_mutex_t mutex_status_change;$/;"	v	typeref:typename:pthread_mutex_t
myfree	dallocate.c	/^void myfree(void * ptr)$/;"	f	typeref:typename:void
ncmp_cbyc	parser.c	/^int ncmp_cbyc(unsigned char dst[],unsigned char src[],int size) {$/;"	f	typeref:typename:int
new_pdc_validation	ipdcGui.c	/^int new_pdc_validation (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:int
new_window	ipdcGui.h	/^GtkWidget *new_window, *setup_display_window;$/;"	v	typeref:typename:GtkWidget *
next	connections.h	/^	struct Lower_Layer_Details *next;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details *
next	connections.h	/^	struct Upper_Layer_Details *next;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details *
nextid	align_sort.h	/^	struct pmupdc_id_list *nextid;$/;"	m	struct:pmupdc_id_list	typeref:struct:pmupdc_id_list *
num	align_sort.h	/^	int num; \/\/ Total Number of PMUs$/;"	m	struct:TimeStampBuffer	typeref:typename:int
num_pmu	align_sort.h	/^	int num_pmu;$/;"	m	struct:pmupdc_id_list	typeref:typename:int
num_pmu	parser.h	/^	int num_pmu;$/;"	m	struct:data_frame	typeref:typename:int
num_pmu	parser.h	/^	unsigned char *num_pmu;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
numbytes	connections.h	/^int UL_UDP_addr_len,UL_TCP_sin_size, numbytes;$/;"	v	typeref:typename:int
oldDataFramesTimeStampList	align_sort.h	/^struct  oldDataFramesTimeStampList$/;"	s
old_df_front	align_sort.c	/^int old_df_front = -1;$/;"	v	typeref:typename:int
old_df_rear	align_sort.c	/^int old_df_rear = -1;$/;"	v	typeref:typename:int
old_fsize	global.h	/^int old_fsize;$/;"	v	typeref:typename:int
open_ipdc_setup	ipdcGui.h	/^	GtkWidget *open_ipdc_setup;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
p_id	ipdcGui.h	/^GtkWidget *p_id, *p_udp, *p_tcp, *p_ip;$/;"	v	typeref:typename:GtkWidget *
p_ip	ipdcGui.h	/^GtkWidget *p_id, *p_udp, *p_tcp, *p_ip;$/;"	v	typeref:typename:GtkWidget ****
p_port	ipdcGui.h	/^GtkWidget *p_port, *p_protocol;$/;"	v	typeref:typename:GtkWidget *
p_protocol	ipdcGui.h	/^GtkWidget *p_port, *p_protocol;$/;"	v	typeref:typename:GtkWidget **
p_tcp	ipdcGui.h	/^GtkWidget *p_id, *p_udp, *p_tcp, *p_ip;$/;"	v	typeref:typename:GtkWidget ***
p_thread	global.h	/^pthread_t UDP_thread,TCP_thread,p_thread, DB_thread;$/;"	v	typeref:typename:pthread_t
p_udp	ipdcGui.h	/^GtkWidget *p_id, *p_udp, *p_tcp, *p_ip;$/;"	v	typeref:typename:GtkWidget **
pdc_addr	connections.h	/^	struct sockaddr_in pdc_addr;$/;"	m	struct:Upper_Layer_Details	typeref:struct:sockaddr_in
pdc_detail_window	ipdcGui.h	/^GtkWidget *pdc_detail_window;$/;"	v	typeref:typename:GtkWidget *
pdc_details_menuitem	ipdcGui.h	/^	GtkWidget *pdc_details_menuitem;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
phasor	parser.h	/^	unsigned char phasor;$/;"	m	struct:format	typeref:typename:unsigned char
phasors	parser.h	/^	unsigned char **phasors;$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char **
phnames	parser.h	/^	unsigned char **phnames;$/;"	m	struct:channel_names	typeref:typename:unsigned char **
phnmr	parser.h	/^	int phnmr;$/;"	m	struct:data_for_each_pmu	typeref:typename:int
phnmr	parser.h	/^	unsigned char *phnmr;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
phunit	parser.h	/^	unsigned char **phunit;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char **
pmu	parser.h	/^	struct for_each_pmu **pmu;$/;"	m	struct:cfg_frame	typeref:struct:for_each_pmu **
pmuCount	global.h	/^unsigned int logIndex,pmuCount,tempPmuCount;$/;"	v	typeref:typename:unsigned int
pmu_remove	connections.h	/^	int pmu_remove;$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
pmuid	connections.h	/^	unsigned int pmuid;$/;"	m	struct:Lower_Layer_Details	typeref:typename:unsigned int
pmuid_next	parser.h	/^	struct status_change_pmupdcid *pmuid_next;$/;"	m	struct:status_change_pmupdcid	typeref:struct:status_change_pmupdcid *
pmupdc_id_list	align_sort.h	/^struct pmupdc_id_list {$/;"	s
polar	parser.h	/^	unsigned char polar;$/;"	m	struct:format	typeref:typename:unsigned char
port	connections.h	/^	int port;$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
port	connections.h	/^	int port;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
prefix	Makefile	/^prefix = \/usr\/local$/;"	m
prev	connections.h	/^	struct Lower_Layer_Details *prev;$/;"	m	struct:Lower_Layer_Details	typeref:struct:Lower_Layer_Details *
prev	connections.h	/^	struct Upper_Layer_Details *prev;$/;"	m	struct:Upper_Layer_Details	typeref:struct:Upper_Layer_Details *
previous_crc	global.h	/^uint16_t previous_crc;$/;"	v	typeref:typename:uint16_t
protocol	connections.h	/^	char protocol[20];$/;"	m	struct:Lower_Layer_Details	typeref:typename:char[20]
protocol	connections.h	/^	char protocol[20];$/;"	m	struct:Upper_Layer_Details	typeref:typename:char[20]
put_data_transmission_off	new_pmu_or_pdc.c	/^int put_data_transmission_off(char pmuid[], char protocol[]) {$/;"	f	typeref:typename:int
put_data_transmission_on	new_pmu_or_pdc.c	/^int put_data_transmission_on(char pmuid[], char protocol[]) {$/;"	f	typeref:typename:int
ready_to_send	align_sort.h	/^	int ready_to_send;$/;"	m	struct:TimeStampBuffer	typeref:typename:int
rear	align_sort.c	/^int rear=-1;$/;"	v	typeref:typename:int
recreate_Connection_Table	recreate.c	/^void recreate_Connection_Table() {$/;"	f	typeref:typename:void
recreate_cfg_objects	recreate.c	/^void recreate_cfg_objects(){ $/;"	f	typeref:typename:void
recreate_mul_connections	recreate.c	/^void recreate_mul_connections(struct Lower_Layer_Details *t11) {$/;"	f	typeref:typename:void
recreate_tcp_connections	recreate.c	/^void recreate_tcp_connections(struct Lower_Layer_Details *t12) {$/;"	f	typeref:typename:void
recreate_udp_connections	recreate.c	/^void recreate_udp_connections(struct Lower_Layer_Details *t11) {$/;"	f	typeref:typename:void
recv_tcp	new_pmu_or_pdc.c	/^int recv_tcp(int tcp_sockfd, unsigned char *tcp_BUF)$/;"	f	typeref:typename:int
remove_Lower_Node	new_pmu_or_pdc.c	/^int remove_Lower_Node(char pmuid[], char protocol[]) {$/;"	f	typeref:typename:int
remove_PDC	new_pmu_or_pdc.c	/^int remove_PDC(char ip[], char port_num[], char protocol[]) {$/;"	f	typeref:typename:int
remove_id_from_status_change_list	parser.c	/^void remove_id_from_status_change_list(unsigned char idcode[]) { $/;"	f	typeref:typename:void
remove_llnode	new_pmu_or_pdc.c	/^void* remove_llnode(void* temp) {$/;"	f	typeref:typename:void *
remove_pdc	ipdcGui.c	/^void remove_pdc (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:void
remove_pdc_button	ipdcGui.h	/^	GtkWidget *remove_pdc_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
remove_pdc_validation	ipdcGui.c	/^int remove_pdc_validation (GtkButton *but, gpointer udata)$/;"	f	typeref:typename:int
remove_pmu_button	ipdcGui.h	/^	GtkWidget *remove_pmu_button;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
request_cfg_frame	connections.h	/^	int request_cfg_frame;$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
rights_label	ipdcGui.h	/^	GtkWidget *rights_label;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
root_pmuid	parser.h	/^}*root_pmuid;$/;"	v	typeref:struct:status_change_pmupdcid *
sa	connections.h	/^struct sigaction sa;$/;"	v	typeref:struct:sigaction
select_function	ipdcGui.c	/^void select_function(GtkWidget *widget, gpointer data)$/;"	f	typeref:typename:void
set_all	ipdcGui.h	/^int set_all;$/;"	v	typeref:typename:int
setup	connections.c	/^void setup(){$/;"	f	typeref:typename:void
setup_display_window	ipdcGui.h	/^GtkWidget *new_window, *setup_display_window;$/;"	v	typeref:typename:GtkWidget **
show_sys_time	ipdcGui.h	/^pthread_t show_sys_time;$/;"	v	typeref:typename:pthread_t
sigchld_handler	connections.c	/^void sigchld_handler(int s) {$/;"	f	typeref:typename:void
smallBuff	global.h	/^char *smallBuff;$/;"	v	typeref:typename:char *
soc	align_sort.h	/^	char *soc;$/;"	m	struct:TimeStampBuffer	typeref:typename:char *
soc	align_sort.h	/^	unsigned int soc;$/;"	m	struct:oldDataFramesTimeStampList	typeref:typename:unsigned int
soc	parser.h	/^	unsigned char *soc;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
soc	parser.h	/^	unsigned char *soc;$/;"	m	struct:data_frame	typeref:typename:unsigned char *
sockfd	connections.h	/^	int sockfd;$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
sockfd	connections.h	/^	int sockfd;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
sort_data_inside_TSB	align_sort.c	/^void sort_data_inside_TSB(int index) { $/;"	f	typeref:typename:void
stat	parser.h	/^	unsigned char *stat;$/;"	m	struct:data_for_each_pmu	typeref:typename:unsigned char *
status_change_pmupdcid	parser.h	/^struct status_change_pmupdcid {$/;"	s
stn	parser.h	/^	unsigned char *stn;$/;"	m	struct:for_each_pmu	typeref:typename:unsigned char *
tcpup	connections.h	/^	int tcpup;$/;"	m	struct:Upper_Layer_Details	typeref:typename:int
tempPmuCount	global.h	/^unsigned int logIndex,pmuCount,tempPmuCount;$/;"	v	typeref:typename:unsigned int
text_view	ipdcGui.h	/^	GtkWidget *text_view;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
text_view1	ipdcGui.h	/^	GtkWidget *text_view1;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
thread_id	connections.h	/^	pthread_t thread_id;$/;"	m	struct:Lower_Layer_Details	typeref:typename:pthread_t
thread_id	connections.h	/^	pthread_t thread_id;$/;"	m	struct:Upper_Layer_Details	typeref:typename:pthread_t
time_align	align_sort.c	/^void time_align(struct data_frame *df) {$/;"	f	typeref:typename:void
time_base	parser.h	/^	unsigned char *time_base;$/;"	m	struct:cfg_frame	typeref:typename:unsigned char *
time_lable	ipdcGui.h	/^	GtkWidget *time_lable;$/;"	m	struct:_ChData	typeref:typename:GtkWidget *
time_thrd_id	ipdcGui.h	/^long int time_thrd_id;$/;"	v	typeref:typename:long int
tname	global.h	/^char tname[20];$/;"	v	typeref:typename:char[20]
to_intconvertor	parser.c	/^unsigned int to_intconvertor(unsigned char array[]) {$/;"	f	typeref:typename:unsigned int
to_long_int_convertor	parser.c	/^unsigned long int to_long_int_convertor(unsigned char array[]) {$/;"	f	typeref:typename:unsigned long int
to_long_int_convertor1	parser.c	/^unsigned int to_long_int_convertor1(unsigned char array[]) {$/;"	f	typeref:typename:unsigned int
uninstall	Makefile	/^uninstall:$/;"	t
up	connections.h	/^	int up; 			\/* used only in tcp *\/$/;"	m	struct:Lower_Layer_Details	typeref:typename:int
validation_pdc_detail	ipdcGui.c	/^int validation_pdc_detail (GtkButton *button, gpointer udata)$/;"	f	typeref:typename:int
validation_result	ipdcGui.c	/^void validation_result (char *msg)$/;"	f	typeref:typename:void
validation_setup_file_name	ipdcGui.c	/^void validation_setup_file_name (GtkWidget *widget, gpointer data)$/;"	f	typeref:typename:void
view_setup_file	ipdcGui.c	/^void view_setup_file (GtkWidget *w, GtkFileSelection *fs)$/;"	f	typeref:typename:void
writeTimeToLog	parser.c	/^void writeTimeToLog(int index,unsigned int IDcode, char frameType, unsigned long int l_soc,unsig/;"	f	typeref:typename:void
write_cfg_to_file	parser.c	/^void write_cfg_to_file()$/;"	f	typeref:typename:void
yes	connections.c	/^int yes = 1; 	\/* argument to setsockopt *\/$/;"	v	typeref:typename:int
